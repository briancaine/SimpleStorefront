<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.2 (doctrine2-annotation) on 2016-05-02 04:02:02.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace NoInc\SimpleStorefrontBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\EntityManager;

/**
 * NoInc\SimpleStorefrontBundle\Entity\User
 *
 * @ORM\Entity(repositoryClass="NoInc\SimpleStorefrontBundle\Repository\UserRepository")
 * @ORM\Table(name="`user`")
 */
class User extends \FOS\UserBundle\Model\User
{
    protected $em;

    /**
     * ID of the User
     *
     * @ORM\Id
     * @ORM\Column(type="integer", nullable=false)
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="float", nullable=false)
     */
    protected $capital;

    /**
     * @ORM\OneToMany(targetEntity="ORMCartItem", mappedBy="user")
     * @ORM\JoinColumn(name="id", referencedColumnName="user_id", nullable=false)
     */
    protected $orm_cart_items;

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \NoInc\SimpleStorefrontBundle\Entity\User
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of capital.
     *
     * @param float $capital
     * @return \NoInc\SimpleStorefrontBundle\Entity\User
     */
    public function setCapital($capital)
    {
        $this->capital = $capital;

        return $this;
    }

    /**
     * Get the value of capital.
     *
     * @return float
     */
    public function getCapital()
    {
        return $this->capital;
    }

    /**
     * Add cart item to collection (one to many).
     *
     * @param \NoInc\SimpleStorefrontBundle\Entity\ORMCartItem $cart_item
     * @return \NoInc\SimpleStorefrontBundle\Entity\User
     */
    public function addCartItem(ORMCartItem $cart_item)
    {
        $this->orm_cart_items[] = $cart_item;

        return $this;
    }

    /**
     * Remove cart item from collection (one to many).
     *
     * @param \NoInc\SimpleStorefrontBundle\Entity\ORMCartItem $cart_item
     * @return \NoInc\SimpleStorefrontBundle\Entity\User
     */
    public function removeCartItem(ORMCartItem $cart_item)
    {
        $this->orm_cart_items->removeElement($cart_item);
        $this->em->remove($cart_item);

        return $this;
    }

    public function removeItemByIndex($index) {
        $items = $this->getCartItems();

        $current_index = 0;
        foreach ($items as $item) {
            if ($current_index == $index) {
                return $this->removeCartItem($item);
            }
            $current_index = $current_index + 1;
        }
    }

    public function addRecipe(Recipe $recipe) {
        $item = new ORMCartItem();
        $item->setRecipe($recipe);
        $item->setUser($this);
        $this->em->persist($item);
        $res = $this->addCartItem($item);
        $this->em->persist($item);
        return $res;
    }

    /**
     * Get cart item entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCartItems()
    {
        $current_index = 0;
        foreach ($this->orm_cart_items as $item) {
            $item->setIndex($current_index);
            $current_index = $current_index + 1;
        }
        return $this->orm_cart_items;
    }

    /* I miss multiple inheritance... */
    public function isPluralCount() {
        return count($this->getCartItems()) != 1;
    }

    public function setEntityManager(EntityManager $em) {
        $this->em = $em;
    }

    public function save() {
        $this->em->flush();
    }

    public function getTotalPrice() {
        $total = 0;
        foreach ($this->getCartItems() as $item) {
            $total = $total + $item->getRecipe()->getPrice();
        }
        return $total;
    }

    public function __sleep()
    {
        return array('id', 'capital');
    }
}
